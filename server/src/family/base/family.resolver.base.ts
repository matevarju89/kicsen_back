/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFamilyArgs } from "./CreateFamilyArgs";
import { UpdateFamilyArgs } from "./UpdateFamilyArgs";
import { DeleteFamilyArgs } from "./DeleteFamilyArgs";
import { FamilyFindManyArgs } from "./FamilyFindManyArgs";
import { FamilyFindUniqueArgs } from "./FamilyFindUniqueArgs";
import { Family } from "./Family";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { RecipeFindManyArgs } from "../../recipe/base/RecipeFindManyArgs";
import { Recipe } from "../../recipe/base/Recipe";
import { FamilyService } from "../family.service";

@graphql.Resolver(() => Family)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FamilyResolverBase {
  constructor(
    protected readonly service: FamilyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Family",
    action: "read",
    possession: "any",
  })
  async _familiesMeta(
    @graphql.Args() args: FamilyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Family])
  @nestAccessControl.UseRoles({
    resource: "Family",
    action: "read",
    possession: "any",
  })
  async families(@graphql.Args() args: FamilyFindManyArgs): Promise<Family[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Family, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Family",
    action: "read",
    possession: "own",
  })
  async family(
    @graphql.Args() args: FamilyFindUniqueArgs
  ): Promise<Family | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Family)
  @nestAccessControl.UseRoles({
    resource: "Family",
    action: "create",
    possession: "any",
  })
  async createFamily(@graphql.Args() args: CreateFamilyArgs): Promise<Family> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Family)
  @nestAccessControl.UseRoles({
    resource: "Family",
    action: "update",
    possession: "any",
  })
  async updateFamily(
    @graphql.Args() args: UpdateFamilyArgs
  ): Promise<Family | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Family)
  @nestAccessControl.UseRoles({
    resource: "Family",
    action: "delete",
    possession: "any",
  })
  async deleteFamily(
    @graphql.Args() args: DeleteFamilyArgs
  ): Promise<Family | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async member(
    @graphql.Parent() parent: Family,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findMember(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async ownUsers(
    @graphql.Parent() parent: Family,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findOwnUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Recipe])
  @nestAccessControl.UseRoles({
    resource: "Recipe",
    action: "read",
    possession: "any",
  })
  async recipes(
    @graphql.Parent() parent: Family,
    @graphql.Args() args: RecipeFindManyArgs
  ): Promise<Recipe[]> {
    const results = await this.service.findRecipes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
